from typing import TYPE_CHECKING, Any

#import logger
import openpyxl

#logger = logger()


def entities_to_excel(
    excel_path: str,
    module_path: str = None,
    definitions_module: Any = None,
) -> None:
    
    complete_dict = {}
    attributes_dict = {}
    properties_dict = {}
    
    workbook = openpyxl.load_workbook(excel_path)

    sheet = workbook.active

    cell_value_A1 = sheet['A1'].value


    entity_types = ["SAMPLE_TYPE", "EXPERIMENT_TYPE", "DATASET_TYPE", "PROPERTY_TYPE", "VOCABULARY_TYPE"]
    if cell_value_A1 not in entity_types:
        #logger.error("The entity type (cell A1) should be one of the following: SAMPLE_TYPE, EXPERIMENT_TYPE, DATASET_TYPE, PROPERTY_TYPE, VOCABULARY_TYPE")
        print("error")
        #return "\n".join(errors)
    else:
        if cell_value_A1 == "SAMPLE_TYPE":
            expected_terms = [
                "Code",
                "Version",
                "Description",
                "Validation script",
                "Generated code prefix",
                "Auto generate codes",
            ]
            second_row_values = [cell.value for cell in sheet[2]]
            code_value = ""
            for term in expected_terms:
                if term not in second_row_values:
                    #logger.error(f"Error: '{term}' not found in the entity headers.")
                    print(f"Error: '{term}' not found in the entity headers.")
                else:
                     # Find the index of the term in the second row
                     term_index = second_row_values.index(term)

                     # Check the cell below "Code"
                     if term == "Code":
                        code_value = sheet.cell(row=3, column=term_index + 1).value
                        attributes_dict["permId"] = code_value
                        attributes_dict["code"] = code_value
                        #if cell_below_code.value != code:
                            #logger.error("Error: The code should be the same one indicated in the file name")

                     # Check the cell below "Version"
                     elif term == "Version":
                        version_value = sheet.cell(row=3, column=term_index + 1).value
                        attributes_dict["version"] = version_value
                        #if str(cell_below_version.value) != version[1:]:
                            #logger.error("Error: The version should be the same one indicated in the file name")
                    
                    
                    # Check the cell below "Description"
                     elif term == "Description":
                        description_value = sheet.cell(row=3, column=term_index + 1).value
                        attributes_dict["description"] = description_value
                        #description_pattern = re.compile(r".*//.*")
                        #if not description_pattern.match(cell_below_description.value):
                            #logger.error("Error: Description should follow the schema: English Description + '//' + German Description.")

                    # Check the cell below "Generated code prefix"
                     elif term == "Generated code prefix":
                        generated_code_value = sheet.cell(row=3, column=term_index + 1).value
                        attributes_dict["generatedCodePrefix"] = generated_code_value
                        #if cell_below_generated_code.value not in code:
                            #logger.error("Error: The value of 'Generated code prefix' should be a part of the 'Code'.")

                    # Check the cell below "Validation script"
                     elif term == "Validation script":
                        validation_value = sheet.cell(row=3, column=term_index + 1).value
                        attributes_dict["validationPlugin"] = validation_value
                        #validation_pattern = re.compile(r"^[A-Za-z0-9_]+\.py$")
                        #if cell_below_validation.value and not validation_pattern.match(cell_below_validation.value):
                             #logger.error("Error: Validation script should follow the schema: Words and/or numbers separated by '_' and ending in '.py'")


                    # Check the cell below "Auto generate codes"
                     elif term == "Auto generate codes":
                        auto_generate_value = sheet.cell(row=3, column=term_index + 1).value
                        attributes_dict["autoGeneratedCode"] = auto_generate_value
                        #if cell_below_auto_generate.value not in ["TRUE", "FALSE"]:
                            #logger.error("Error: Value below 'Auto generate codes' should be 'TRUE' or 'FALSE'.")

            complete_dict[code_value] = attributes_dict

            print(complete_dict)
            
            #add_properties(complete_dict, code_value, properties_dict)    
            
        # elif cell_value_A1 == "EXPERIMENT_TYPE" or cell_value_A1 == "DATASET_TYPE":
        #     expected_terms = [
        #         "Version",
        #         "Code",
        #         "Description",
        #         "Validation script"
        #     ]
        #     second_row_values = [cell.value for cell in sheet[2]]
        #     for term in expected_terms:
        #         if term not in second_row_values:
        #             errors.append(f"Error: '{term}' not found in the second row.")
        #         else:
        #              # Find the index of the term in the second row
        #              term_index = second_row_values.index(term)

        #              # Check the cell below "Version"
        #              if term == "Version":
        #                 cell_below_version = sheet.cell(row=3, column=term_index + 1)
        #                 if str(cell_below_version.value) != version[1:]:
        #                     errors.append("Error: The version should be the same one indicated in the file name")

        #             # Check the cell below "Code"
        #              elif term == "Code":
        #                 cell_below_code = sheet.cell(row=3, column=term_index + 1)
        #                 if cell_below_code.value != code:
        #                     errors.append("Error: The code should be the same one indicated in the file name")
                    
                    
        #             # Check the cell below "Description"
        #              elif term == "Description":
        #                 cell_below_description = sheet.cell(row=3, column=term_index + 1)
        #                 description_pattern = re.compile(r".*//.*")
        #                 if not description_pattern.match(cell_below_description.value):
        #                     errors.append("Error: Description should follow the schema: English Description + '//' + German Description.")
            
            
        #             # Check the cell below "Validation script"
        #              elif term == "Validation script":
        #                 cell_below_validation = sheet.cell(row=3, column=term_index + 1)
        #                 validation_pattern = re.compile(r"^[A-Za-z0-9_]+\.py$")
        #                 if cell_below_validation.value and not validation_pattern.match(cell_below_validation.value):
        #                     errors.append("Error: Validation script should follow the schema: Words and/or numbers separated by '_' and ending in '.py'")

        #     errors = check_properties(sheet, errors) 
            
        # elif cell_value_A1 == "VOCABULARY_TYPE":
        #     expected_terms = [
        #         "Version",
        #         "Code",
        #         "Description"
        #     ]
        #     second_row_values = [cell.value for cell in sheet[2]]
        #     for term in expected_terms:
        #         if term not in second_row_values:
        #             errors.append(f"Error: '{term}' not found in the second row.")
        #         else:
        #              # Find the index of the term in the second row
        #              term_index = second_row_values.index(term)

        #              # Check the cell below "Version"
        #              if term == "Version":
        #                 cell_below_version = sheet.cell(row=3, column=term_index + 1)
        #                 if str(cell_below_version.value) != version[1:]:
        #                     errors.append("Error: The version should be the same one indicated in the file name. Value found: {cell_below_version.value}")

        #             # Check the cell below "Code"
        #              elif term == "Code":
        #                 cell_below_code = sheet.cell(row=3, column=term_index + 1)
        #                 if cell_below_code.value != code:
        #                     errors.append("Error: The code should be the same one indicated in the file name. Value found: {cell_below_code.value}")
                    
                    
        #             # Check the cell below "Description"
        #              elif term == "Description":
        #                 cell_below_description = sheet.cell(row=3, column=term_index + 1)
        #                 description_pattern = re.compile(r".*//.*")
        #                 if not description_pattern.match(cell_below_description.value):
        #                     errors.append("Error: Description should follow the schema: English Description + '//' + German Description. Value found: {cell_below_description.value}")
            
        #     errors = check_vocab_terms(sheet, errors)

        # elif cell_value_A1 == "PROPERTY_TYPE":
        #     expected_terms = [
        #         "Version",
        #         "Code",
        #         "Description",
        #         "Mandatory",
        #         "Show in edit views",
        #         "Section",
        #         "Property label",
        #         "Data type",
        #         "Vocabulary code"
        #     ]
        #     second_row_values = [cell.value for cell in sheet[2]]
        #     for term in expected_terms:
        #         if term not in second_row_values:
        #             errors.append(f"Error: '{term}' not found in the second row.")
        #         else:
        #              # Find the index of the term in the second row
        #              term_index = second_row_values.index(term) + 1


        #              # Check the column below "Version"
        #              if term == "Version":
        #                 column_below_version = sheet[term_index][2:]
        #                 # Check if any value in the column is not an integer
        #                 non_integer_cells = [(i + 3, cell.value) for i, cell in enumerate(column_below_version) if not isinstance(cell.value, int)]
        #                 if non_integer_cells:
        #                     # Append an error indicating the positions (row numbers) that are not integers
        #                     non_integer_indices = [str(row) for row, _ in non_integer_cells]
        #                     invalid_values = [str(value) for _, value in non_integer_cells]
        #                     errors.append(f"<strong>Error</strong>: Values not valid found in the 'Version' column (they should be Integers) at row(s): {', '.join(non_integer_indices)}. Value(s) found: {', '.join(invalid_values)}")

        #             # Check the column below "Code"
        #              elif term == "Code":
        #                 column_below_code = sheet[term_index][2:]
        #                 invalid_codes = [i + 3 for i, cell in enumerate(column_below_code) if not re.match(r'^\$?[A-Z0-9_.]+$', str(cell.value))]
        #                 if invalid_codes:
        #                     # Append an error indicating the positions (row numbers) with invalid values for the current term
        #                     errors.append(f"Error: Invalid code found in the '{term}' column at row(s): {', '.join(map(str, invalid_codes))}. Value found: {cell.value}")
                    
                    
        #             # Check the cell below "Description"
        #              elif term == "Description":
        #                 column_below_description = sheet[term_index][2:]
        #                 invalid_indices = [i + 3 for i, cell in enumerate(column_below_code) if not re.match(r'.*//.*', str(cell.value))]
        #                 if invalid_indices:
        #                     errors.append(f"Error: Invalid value(s) found in the '{term}' column at row(s): {', '.join(map(str, invalid_indices))}. Description should follow the schema: English Description + '//' + German Description. Value found: {cell.value}")

        #             # Check the cell below "Mandatory"
        #              elif term == "Mandatory":
        #                 column_below_mandatory = sheet[term_index][2:]
        #                 invalid_mandatory = [i + 3 for i, cell in enumerate(column_below_mandatory) if cell.value not in ["TRUE", "FALSE"]]
        #                 if invalid_mandatory:
        #                     errors.append(f"Error: Invalid value found in the '{term}' column at row(s): {', '.join(map(str, invalid_mandatory))}. Accepted values: TRUE, FALSE. Value found: {cell.value}")

        #             # Check the cell below "Show in edit views"
        #              elif term == "Show in edit views":
        #                 column_below_show = sheet[term_index][2:]
        #                 invalid_show = [i + 3 for i, cell in enumerate(column_below_show) if cell.value not in ["TRUE", "FALSE"]]
        #                 if invalid_show:
        #                     errors.append(f"Error: Invalid value found in the '{term}' column at row(s): {', '.join(map(str, invalid_show))}. Accepted values: TRUE, FALSE. Value found: {cell.value}")

        #             # Check the cell below "Section"
        #              elif term == "Section":
        #                 column_below_section = sheet[term_index][2:]
        #                 invalid_section = [i + 3 for i, cell in enumerate(column_below_section) if not re.match(r'.*', str(cell.value))]
        #                 if invalid_section:
        #                     errors.append(f"Error: Invalid value found in the '{term}' column at row(s): {', '.join(map(str, invalid_section))}. Specify the section as text format. Value found: {cell.value}")

        #             # Check the cell below "Property label"
        #              elif term == "Property label":
        #                 column_below_label = sheet[term_index][2:]
        #                 invalid_label = [i + 3 for i, cell in enumerate(column_below_label) if not re.match(r'.*', str(cell.value))]
        #                 if invalid_label:
        #                     errors.append(f"Error: Invalid value found in the '{term}' column at row(s): {', '.join(map(str, invalid_label))}. Specify the property label as text format. Value found: {cell.value}")

        #             # Check the cell below "Data type"
        #              elif term == "Data type":
        #                 column_below_type = sheet[term_index][2:]
        #                 invalid_type = [i + 3 for i, cell in enumerate(column_below_type) if cell.value not in ["INTEGER", "REAL", "VARCHAR", "MULTILINE_VARCHAR", "HYPERLINK", "BOOLEAN", "CONTROLLEDVOCABULARY", "XML", "TIMESTAMP", "DATE", "SAMPLE"]]
        #                 if invalid_type:
        #                     errors.append(f"Error: Invalid value found in the '{term}' column at row(s): {', '.join(map(str, invalid_type))}. Accepted types: INTEGER, REAL, VARCHAR, MULTILINE_VARCHAR, HYPERLINK, BOOLEAN, CONTROLLEDVOCABULARY, XML, TIMESTAMP, DATE, SAMPLE.  Value found: {cell.value}")

        #             # Check the column below "Vocabulary code"
        #              elif term == "Vocabulary code":
        #                 column_below_vocab = sheet[term_index][2:]
        #                 invalid_vocab = [i + 3 for i, cell in enumerate(column_below_vocab) if cell.value is not None and not re.match(r'^\$?[A-Z0-9_.]+$', str(cell.value))]
        #                 if invalid_vocab:
        #                     # Append an error indicating the positions (row numbers) with invalid values for the current term
        #                     errors.append(f"Error: Invalid vocabulary code found in the '{term}' column at row(s): {', '.join(map(str, invalid_vocab))}. Value found: {cell.value}")

entities_to_excel(r"C:\Users\cmadaria\Documents\Projects\Masterdata Checker\object_type_CHEMICAL_v1_S.3_cmadaria.xlsx")
